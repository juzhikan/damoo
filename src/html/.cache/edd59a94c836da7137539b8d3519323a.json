{"dependencies":[{"name":"babel-runtime/helpers/classCallCheck"},{"name":"babel-runtime/helpers/createClass"},{"name":"../common/utils"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _utils = require(\"../common/utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar PrizePool = function () {\n  function PrizePool(options) {\n    (0, _classCallCheck3.default)(this, PrizePool);\n\n    var opts = options || {};\n    if (!opts.container || !opts.prizes || !opts.prizes.length) return;\n\n    var length = opts.prizes.length;\n    this.container = (0, _utils.getElement)(opts.container);\n    var position = (0, _utils.getStyle)(this.container, 'position');\n    this.container.style.position = !position || position === 'static' ? 'relative' : position;\n\n    this.width = parseFloat((0, _utils.getStyle)(this.container, 'width'));\n    this.prizeWidth = this.width / 12;\n    this.floorBase = 10;\n    this.floorHeight = 20;\n\n    this.regionA = [];\n    this.regionB = [];\n    this.regionC = [];\n    this.pool = [];\n    /* 构造奖品池item */\n    this.arrange(opts.prizes);\n    /* 放置 */\n    this.place();\n  }\n\n  (0, _createClass3.default)(PrizePool, [{\n    key: \"arrange\",\n    value: function arrange(prizes) {\n      /* 随机位置映射 */\n      var randomMap = (0, _utils.randomMapping)(prizes.length);\n      for (var i = 0; i < randomMap.length; i++) {\n        var randomLocation = randomMap[i];\n        var regionFlag = i % 3;\n        var floor = Math.floor(i / 3);\n        var prize = prizes[randomLocation];\n        switch (regionFlag) {\n          case 0:\n            /* region A */\n            this.add(prize, 'A', floor);\n            break;\n          case 1:\n            /* region B */\n            this.add(prize, 'B', floor);\n            break;\n          case 2:\n            /* region C */\n            this.add(prize, 'C', floor);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }, {\n    key: \"add\",\n    value: function add(content, region, floor) {\n      var prize = {\n        content: content,\n        region: region,\n        floor: floor,\n        transform: this.getTransform(region, floor)\n      };\n      this['region' + region].push(prize);\n      this.pool.push(prize);\n    }\n  }, {\n    key: \"getTransform\",\n    value: function getTransform(region, floor) {\n      var translateY = this.floorBase + this.floorHeight * floor;\n      var translateX = this.getTranslateX(region);\n      return 'translateX(' + translateX + 'px) translateY(' + -translateY + 'px) translateZ(0px)';\n    }\n  }, {\n    key: \"getTranslateX\",\n    value: function getTranslateX(region) {\n      var floorWidth = this.width / 3;\n      var range = floorWidth / 4;\n      var res;\n      switch (region) {\n        case 'A':\n          /* region A */\n          res = (0, _utils.getRandom)(range, range * 3);\n          break;\n        case 'B':\n          /* region B */\n          res = (0, _utils.getRandom)(range * 5, range * 7);\n          break;\n        case 'C':\n          /* region C */\n          res = (0, _utils.getRandom)(range * 9, range * 11);\n          break;\n        default:\n          break;\n      }\n      return res - this.prizeWidth - this.width / 2;\n    }\n  }, {\n    key: \"place\",\n    value: function place() {\n      var _this = this;\n\n      var fragment = document.createDocumentFragment();\n      this.pool.forEach(function (item) {\n        var prize = document.createElement('img');\n        prize.src = item.content;\n        prize.style.position = 'absolute';\n        prize.width = _this.prizeWidth;\n        prize.style.borderRadius = '50%';\n        prize.style.bottom = 0;\n        prize.style.left = '50%';\n        prize.style.transform = item.transform;\n        fragment.appendChild(prize);\n      });\n      this.container.appendChild(fragment);\n    }\n  }]);\n  return PrizePool;\n}();\n\nexports.default = PrizePool;"},"hash":"6282d8d277cde2c08d082425da26ccc9"}